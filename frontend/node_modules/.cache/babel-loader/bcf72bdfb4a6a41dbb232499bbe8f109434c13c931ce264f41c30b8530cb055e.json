{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üîÑ API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('‚ùå API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for logging\napi.interceptors.response.use(response => {\n  var _response$config$meth;\n  console.log(`‚úÖ API Response: ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('‚ùå API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API service object\nconst apiService = {\n  // Health and system info\n  async getHealth() {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  async getContractInfo() {\n    const response = await api.get('/contracts/info');\n    return response.data;\n  },\n  // Pledge management\n  async createPledge(pledgeData) {\n    const response = await api.post('/pledge/create', pledgeData);\n    return response.data;\n  },\n  async payClient(agreementId) {\n    const response = await api.post('/pledge/pay-client', {\n      agreementId\n    });\n    return response.data;\n  },\n  async getPledgeDetails(agreementId) {\n    const response = await api.get(`/pledge/${agreementId}`);\n    return response.data;\n  },\n  async getClientPledges(clientAddress) {\n    const response = await api.get(`/client/${clientAddress}/pledges`);\n    return response.data;\n  },\n  // Token operations\n  async purchaseTokens(purchaseData) {\n    const response = await api.post('/tokens/purchase', purchaseData);\n    return response.data;\n  },\n  // Utility functions\n  async getFreeUSDT(address) {\n    const response = await api.post('/faucet/usdt', {\n      address\n    });\n    return response.data;\n  },\n  // Error handling wrapper\n  async handleApiCall(apiCall, errorMessage = 'API call failed') {\n    try {\n      return await apiCall();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || errorMessage;\n      console.error('API Error:', message);\n      throw new Error(message);\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_response$config$meth","data","_error$response","message","apiService","getHealth","get","getContractInfo","createPledge","pledgeData","post","payClient","agreementId","getPledgeDetails","getClientPledges","clientAddress","purchaseTokens","purchaseData","getFreeUSDT","address","handleApiCall","apiCall","errorMessage","_error$response2","_error$response2$data","Error"],"sources":["C:/Users/imani/rwa-tokenization-platform/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('‚ùå API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for logging\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('‚ùå API Response Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API service object\r\nconst apiService = {\r\n  // Health and system info\r\n  async getHealth() {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n\r\n  async getContractInfo() {\r\n    const response = await api.get('/contracts/info');\r\n    return response.data;\r\n  },\r\n\r\n  // Pledge management\r\n  async createPledge(pledgeData) {\r\n    const response = await api.post('/pledge/create', pledgeData);\r\n    return response.data;\r\n  },\r\n\r\n  async payClient(agreementId) {\r\n    const response = await api.post('/pledge/pay-client', { agreementId });\r\n    return response.data;\r\n  },\r\n\r\n  async getPledgeDetails(agreementId) {\r\n    const response = await api.get(`/pledge/${agreementId}`);\r\n    return response.data;\r\n  },\r\n\r\n  async getClientPledges(clientAddress) {\r\n    const response = await api.get(`/client/${clientAddress}/pledges`);\r\n    return response.data;\r\n  },\r\n\r\n  // Token operations\r\n  async purchaseTokens(purchaseData) {\r\n    const response = await api.post('/tokens/purchase', purchaseData);\r\n    return response.data;\r\n  },\r\n\r\n  // Utility functions\r\n  async getFreeUSDT(address) {\r\n    const response = await api.post('/faucet/usdt', { address });\r\n    return response.data;\r\n  },\r\n\r\n  // Error handling wrapper\r\n  async handleApiCall(apiCall, errorMessage = 'API call failed') {\r\n    try {\r\n      return await apiCall();\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || error.message || errorMessage;\r\n      console.error('API Error:', message);\r\n      throw new Error(message);\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}